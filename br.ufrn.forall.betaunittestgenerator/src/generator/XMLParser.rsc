@license{
	Copyright (c) 2014, Ernesto C. B. de Matos, Anamaria M. Moreira, João B. de S. Neto.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that 
	the following conditions are met:
	
	1. Redistributions of source code must retain the above copyright notice, this list of conditions and the 
		following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
		following disclaimer in the documentation and/or other materials provided with the distribution.
	
	3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote 
		products derived from this software without specific prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
	SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
	USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}
@contributor{João Batista de Souza Neto}

module generator::XMLParser

import IO;
import List;
import String;
import lang::xml::DOM;
import generator::Model;

@doc{
Name: XMLParser

Synopsis: Parse an XML report generated by BETA and return a TestSuite instance.

Examples:
<screen>
import IO;
import br::ufrn::forall::beta::generator::Model;
import br::ufrn::forall::beta::generator::XMLParser;
TS = testSuiteFromXML(|file:///Users/joaosouza/Downloads/beta_tool/report_for_addPaper_from_Paperround.xml|);
println(TS);
</screen>
The output `TS` of `testSuiteFromXML` is a TestSuite instance that represents the content of the XML report `report_for_addPaper_from_Paperround.xml` generated by BETA.
}

public TestSuite testSuiteFromXML(loc xmlFile){
	return testSuiteFromXML(readFile(xmlFile));
}

public TestSuite testSuiteFromXML(str xml){
	// DOM instance of the XML report
	Node doc = parseXMLDOMTrim(xml);
	Node root = doc.root;
	
	// variables that will receive the report data
	str machineName = "";
	list[str] machineInvariant = [];
	str operationUnderTest = "";
	str partitionStrategy = "";
	str combinatorialCriteria = "";
	list[OracleStrategy] oracleStrategies = [Exception()]; // the Exception strategy is default
	list[TestCase] testCases = [];
	
	// iterating in the root's children of the XML report
	for(Node n <- root.children){
		switch(n){
			// extract the content information of machine-name tag
			case element(none(), "machine-name", [charData(mn)]) : {
				machineName = mn;
			}
			// extract the content information of machine-invariant tag
			case element(none(), "machine-invariant", invariantClauses) : {
				// extract the invariant clauses
				for(Node i <- invariantClauses){
					if(!isEmpty(i.children))
						machineInvariant = machineInvariant + head(i.children).text;
				}
			}
			// extract the content information of operation-under-test tag
			case element(none(),"operation-under-test", [charData(out)]) : {
				operationUnderTest = out;
			}
			// extract the content information of partition-strategy tag
			case element(none(),"partition-strategy",[charData(ps)]) : {
				partitionStrategy = ps;
			}
			// extract the content information of combinatorial-criteria tag
			case element(none(),"combinatorial-criteria",[charData(cc)]) : {
				combinatorialCriteria = cc;
			}
			// extract the content information of oracle-strategy tag
			case element(none(),"oracle-strategy", oracles) : {
				for(Node or <- oracles){
					switch(or){
						// add StateVariables for the oracle strategies if the content of state-variables tag is true
						case element(none(),"state-variables",[charData("true")]) : 
							oracleStrategies = oracleStrategies + StateVariables();
						// add ReturnValues for the oracle strategies if the content of return-variables tag is true
						case element(none(),"return-variables",[charData("true")]) : 
							oracleStrategies = oracleStrategies + ReturnValues();
						// add StateInvariant for the oracle strategies if the content of invariant-ok tag is true
						case element(none(),"invariant-ok",[charData("true")]) : 
							oracleStrategies = oracleStrategies + StateInvariant();
					}
				}
			}
			// extract the content information of test-cases tag
			case element(none(),"test-cases", tcs) : {
				// variables that will receive the test cases data
				int id = 0;
				str formula = ""; 
				bool negative = false;
				list[Variable] stateVariables = [];
				list[Parameter] operationParameters = []; 
				list[Variable] returnVariables = [];
				list[Variable] expectedStateValues = [];
				
				// variables that will receive the variables or parameters data
				str identifier = "";
				list[str] values = [];
				
				// iterating in the test-cases tag's children (test cases)
				for(Node tc <- tcs){
					// iterating in the test-case tag's children (test case contents) 
					for(Node e <- tc.children){
						switch(e){
							// extract the content information of id tag
							case element(none(),"id",[charData(i)]) : id = toInt(i);
							// extract the content information of formula tag
							case element(none(),"formula",[charData(f)]) : formula = f;
							// extract the content information of isNegative tag
							case element(none(),"isNegative",[charData(neg)]) : {
								if(neg == "false"){
									negative = false;
								}else{
									negative = true;
								}
							}
							// extract the content information of state-variables tag
							case element(none(),"state-variables", sv) : {
								// iterating in the state-variables tag's children (state variables) 
								for(Node v <- sv){
									values = []; // clean the values list
									// iterating in the variable tag's children (state variable contents) 
									for(Node va <- v.children){
										switch(va){
											// extract the content information of identifier tag
											case element(none(),"identifier",[charData(identf)]) : identifier = identf;
											// extract the content information of values tag
											case element(none(),"values", vls) : {
												// iterating in the values tag's children (values)
												for(Node vl <- vls){
													// extract the content information of value tag and add to the values list
													if(!isEmpty(vl.children))
														values = values + head(vl.children).text;
												}
											} 
										}
									}
									// instantiate and add a Variable to the state variables list
									stateVariables = stateVariables + Variable(identifier, values);
								}
							}
							// extract the content information of operation-parameters tag
							case element(none(),"operation-parameters", op) : {
								// iterating in the operation-parameters tag's children (operation parameters)
								for(Node p <- op){
									values = []; // clean the values list
									// iterating in the parameter tag's children (parameter contents)
									for(Node pa <- p.children){
										switch(pa){
											// extract the content information of identifier tag
											case element(none(),"identifier",[charData(identf)]) : identifier = identf;
											// extract the content information of values tag
											case element(none(),"values", vls) : {
												// iterating in the values tag's children (values)
												for(Node vl <- vls){
													// extract the content information of value tag and add to the values list
													if(!isEmpty(vl.children))
														values = values + head(vl.children).text;
												}
											} 
										}
									}
									// instantiate and add a Parameter to the operation parameters list
									operationParameters = operationParameters + Parameter(identifier, values);
								}
							}
							// extract the content information of expected-state-values tag
							case element(none(),"expected-state-values", sv) : {
								// iterating in the state-variables tag's children (state variables) 
								for(Node v <- sv){
									values = []; // clean the values list
									// iterating in the variable tag's children (state variable contents) 
									for(Node va <- v.children){
										switch(va){
											// extract the content information of identifier tag
											case element(none(),"identifier",[charData(identf)]) : identifier = identf;
											// extract the content information of values tag
											case element(none(),"values", vls) : {
												// iterating in the values tag's children (values)
												for(Node vl <- vls){
													// extract the content information of value tag and add to the values list
													if(!isEmpty(vl.children))
														values = values + head(vl.children).text;
												}
											} 
										}
									}
									// instantiate and add a Variable to the state variables list
									expectedStateValues = expectedStateValues + Variable(identifier, values);
								}
							}
							// extract the content information of return-variables tag
							case element(none(),"return-variables", rv) : {
								// iterating in the return-variables tag's children (return variables)
								for(Node r <- rv){
									values = []; // clean the values list
									// iterating in the variable tag's children (return variable contents) 
									for(Node re <- r.children){
										switch(re){
											// extract the content information of identifier tag
											case element(none(),"identifier",[charData(identf)]) : identifier = identf;
											// extract the content information of values tag
											case element(none(),"values", vls) : {
												// iterating in the values tag's children (values)
												for(Node vl <- vls){
													// extract the content information of value tag and add to the values list
													if(!isEmpty(vl.children))
														values = values + head(vl.children).text;
												}
											} 
										}
									}
									// instantiate and add a Variable to the return variables list
									returnVariables = returnVariables + Variable(identifier, values);
								}
							}
						}
					}
					// instantiate and add a TestCase to the test cases list
					testCases = testCases + TestCase(id, formula, negative, stateVariables, operationParameters, returnVariables, expectedStateValues);
					// clean the variables and parameters lists
					stateVariables = [];
					operationParameters = []; 
					returnVariables = [];
					expectedStateValues = [];
				}
			}
		}
	}
	// instantiate and return a TestSuite with the content extracted of the XML report
	return TestSuite(machineName, machineInvariant, operationUnderTest, partitionStrategy, combinatorialCriteria, testCases, oracleStrategies);
}